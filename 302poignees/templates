//Basic Example
<mesh rotation={this.state.cubeRotation}>
  <boxGeometry width={1} height={1} depth={1} />
  <meshBasicMaterial color={0x00ff00} />
</mesh>


//Drag Physics
<React3 antialias mainCamera="camera" width={width} height={height} onAnimate={this._onAnimate} clearColor={this.fog.color} gammaInput gammaOutput shadowMapEnabled>
  <module ref="mouseInput" descriptor={MouseInput}/>
  <resources>
    <boxGeometry resourceId="cubeGeo" width={0.5} height={0.5} depth={0.5} widthSegments={10} heightSegments={10} />
    <meshPhongMaterial resourceId="cubeMaterial" color={0x888888} />
  </resources>
  <scene ref="scene" fog={this.fog}>
    <perspectiveCamera name="camera" fov={30} aspect={width / height} near={0.5} far={10000} position={this.cameraPosition} quaternion={this.cameraQuaternion} ref="camera" />
    <ambientLight color={0x666666} />
    <directionalLight color={0xffffff} intensity={1.75} castShadow shadowMapWidth={1024} shadowMapHeight={1024} shadowCameraLeft={-d} shadowCameraRight={d} shadowCameraTop={d} shadowCameraBottom={-d} shadowCameraFar={3 * d} shadowCameraNear={d} position={this.lightPosition} lookAt={this.lightTarget} />
    <mesh castShadow receiveShadow quaternion={this.groundQuaternion}>
      <planeBufferGeometry width={100} height={100} widthSegments={1} heightSegments={1} />
      <meshLambertMaterial color={0x777777} />
    </mesh>
    {cubeMeshes}
    <mesh visible={clickMarkerVisible} position={clickMarkerPosition}>
      <sphereGeometry radius={0.2} widthSegments={8} heightSegments={8} />
      <meshLambertMaterial color={0x772211} />
    </mesh>
  </scene>
</React3>


// Generated Shapes
<React3 width={width} height={height} antialias={window.devicePixelRatio} mainCamera="mainCamera" clearColor={0xf0f0f0} onAnimate={this._onAnimate}>
  <scene ref="scene">
    <perspectiveCameraname="mainCamera" ref="camera" fov={50} aspect={width / height} near={1} far={1000} position={this.cameraPosition}>
      <pointLight color={0xffffff} intensity={0.8} />
    </perspectiveCamera>
    <Resources/>
    <group position={this.groupPosition} rotation={groupRotation}>
      <Shapes/>
    </group>
  </scene>
</React3>


//Display
class Display extends Component {
  constructor(props, context) {
    super(props, context);

    this.state = {
      inputType: "",
      file: null,
      welcomeText: "Welcome !",
      meshTest: null,
    };

    this.cameraPosition = new THREE.Vector3(0, 0, 3);
    this._onAnimate = () => {
    };
    this.startDisplay = this.startDisplay.bind(this);
  }
  startDisplay(type, file) {
    this.setState({inputType: type});
    this.setState({file: file});

    var figureMeshes;
    var mesh = null;
    var loader = new THREE.JSONLoader();
    loader.load('../public/figure1.json', function(geometry) {
      mesh = new THREE.Mesh(geometry);
      this.setState({meshTest: mesh});
    });
  }
  initMesh() {
    var mesh = null;
    var loader = new THREE.JSONLoader();
    loader.load('./figure1.json', function(geometry) {
      mesh = new THREE.Mesh(geometry);
    });
    console.log("okek" + mesh);
    return (mesh);
  }
  render() {
    var height = 700;
    var width = $(".canvasGL").width();


    var meshTest = this.initMesh();
    return (
      <React3 mainCamera="camera" width={width} height={height} onAnimate={this._onAnimate}>
        <resources>
        </resources>
        <scene>
          <perspectiveCamera name="camera" fov={75} aspect={width / height} near={0.1} far={1000} position={this.cameraPosition}/>
          <pointLight color={0xffffff} intensity={0.8} />
          {meshTest}
        </scene>
      </React3>
    );
  }
}

  y
  ^
  |
z . -> x
